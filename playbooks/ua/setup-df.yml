---
- name: Create UA user on Data Fabric
  hosts: datafabric
  become: true

  vars:
    pwd_filepath: "/tmp/ezlab/{{ hostvars[groups['ua'][0]].ua_clustername }}/ua_df_password"
    pwd_alias: "{{ lookup('ansible.builtin.password', pwd_filepath, length=12) }}"

  tasks:
    - name: Ensure group
      ansible.builtin.group:
        name: "{{ hostvars[groups['ua'][0]].ua_df_username }}"
        state: present

    - name: Ensure user
      ansible.builtin.user:
        name: "{{ hostvars[groups['ua'][0]].ua_df_username }}"
        password: "{{ pwd_alias | password_hash('sha512') }}"
        group: "{{ hostvars[groups['ua'][0]].ua_df_username }}"
        home: "/home/{{ hostvars[groups['ua'][0]].ua_df_username }}"
        shell: /bin/bash


- name: Prepare external Data Fabric first node
  hosts: datafabric[0]
  become: true

  vars:
    pwd_filepath: "/tmp/ezlab/{{ hostvars[groups['ua'][0]].ua_clustername }}/ua_df_password"
    pwd_alias: "{{ lookup('ansible.builtin.password', pwd_filepath, length=12) }}"

  tasks:
    # TODO: should run separate tasks and handle failure properly
    - name: Setup DF credentials
      ansible.builtin.shell:
        cmd: |
          set -euo pipefail
          # login as cluster admin to run these commands
          echo "{{ hostvars[groups['datafabric'][0]].df_password }}" | maprlogin password -user {{ hostvars[groups['datafabric'][0]].df_username }}

          # allow user to login
          maprcli acl edit -type cluster -user {{ hostvars[groups['ua'][0]].ua_df_username }}:login,cv

          # ignore volume create errors, since 'volume exists' also returns error
          maprcli volume create -name ezua-base-volume -path {{ hostvars[groups['ua'][0]].ua_df_mount_path }} -type rw -json \
            -rootdiruser {{ hostvars[groups['ua'][0]].ua_df_username }} -rootdirgroup {{ hostvars[groups['ua'][0]].ua_df_username }} -createparent 1 || true

          # generate tenantticket
          [ -f /tmp/maprtenantticket ] || maprlogin generateticket -type tenant -user {{ hostvars[groups['ua'][0]].ua_df_username }} -out /tmp/maprtenantticket

          # test new user login
          # echo "{{ pwd_alias }}" | maprlogin password -user {{ hostvars[groups['ua'][0]].ua_df_username }}

        creates: "/tmp/maprtenantticket"

    # TODO: check for empty result
    - name: Get CLDB nodes
      ansible.builtin.shell:
        cmd: "/opt/mapr/bin/maprcli node list -columns hn -filter svc==cldb -json > /tmp/cldb_nodes.json"
        creates: "/tmp/cldb_nodes.json"

    # TODO: check for empty result
    - name: Get REST nodes
      ansible.builtin.shell:
        cmd: "/opt/mapr/bin/maprcli node list -columns hn -filter svc==apiserver -json > /tmp/rest_nodes.json"
        creates: "/tmp/rest_nodes.json"

    # TODO: check for empty result
    - name: Get S3 nodes
      ansible.builtin.shell:
        cmd: "/opt/mapr/bin/maprcli node list -columns hn -filter svc==s3server -json > /tmp/s3_nodes.json"
        creates: "/tmp/s3_nodes.json"

    # TODO: check key generation failures
    - name: Create S3 keys
      ansible.builtin.shell:
        cmd: "maprcli s3keys generate -domainname primary -accountname default -username {{ hostvars[groups['ua'][0]].ua_df_username }} -json > /tmp/s3_keys.json"
        creates: "/tmp/s3_keys.json"

    - name: Save settings for DF
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "/tmp/{{ item.file }}"
        mode: "0o644"
      delegate_to: localhost
      with_items:
        - { file: 'password', content: "{{ pwd_alias }}" }

    - name: Get DF files
      ansible.builtin.fetch:
        src: "{{ item }}"
        dest: "/tmp/ezlab/{{ hostvars[groups['ua'][0]].ua_clustername }}/"
        flat: true
      with_items:
        - "/opt/mapr/conf/ca/chain-ca.pem"
        - "/tmp/maprtenantticket"
        - "/tmp/cldb_nodes.json"
        - "/tmp/rest_nodes.json"
        - "/tmp/s3_nodes.json"
        - "/tmp/s3_keys.json"
